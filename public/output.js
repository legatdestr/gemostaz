/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _SimpleChart = __webpack_require__(1);\n\nvar _SimpleChart2 = _interopRequireDefault(_SimpleChart);\n\nvar _RowChart = __webpack_require__(2);\n\nvar _RowChart2 = _interopRequireDefault(_RowChart);\n\nvar _MultiCharts = __webpack_require__(3);\n\nvar _MultiCharts2 = _interopRequireDefault(_MultiCharts);\n\nvar _BandZoom = __webpack_require__(4);\n\nvar _BandZoom2 = _interopRequireDefault(_BandZoom);\n\nvar _Chart = __webpack_require__(5);\n\nvar _Chart2 = _interopRequireDefault(_Chart);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* SimpleChart class*/\n/*var mainChart = new SimpleChart(document.querySelector(\".main-chart\"));\n\nfetch(\"./data.json\")\n    .then(response => response.json())\n    .then((data) => {\n        mainChart.setData(data);\n        mainChart.renderChart();\n    })*/\n/* ------------------ */\n\n/* RowChart */\n/*RowChart(document.querySelector(\".main-chart\"))*/\n\n/* TODO: неправильно работает создание нескольких графиков, исправить */\nvar chart = new _Chart2.default(document.querySelector(\".main-chart\")),\n    chart2 = new _Chart2.default(document.querySelector(\".main-chart\"));\n\nconsole.log(chart);\n\nvar fullData = {},\n    intervalId = null,\n    i = 20;\n\nd3.csv('./data.csv', function (data) {\n    var columns = data['columns'];\n    data.forEach(function (d) {\n        d.x = +d.x * 60;\n        d.y = +d.y;\n    });\n\n    delete data['columns'];\n\n    fullData['1'] = data;\n\n    d3.csv('./data-2.csv', function (data2) {\n        data2.forEach(function (d) {\n            d.x = +d.x * 60;\n            d.y = +d.y;\n        });\n\n        delete data2['columns'];\n\n        fullData['2'] = data2;\n\n        fullData['1'] = [{ 'x': 0, 'y': 0 }];\n\n        chart.setData(fullData);\n        chart2.setData(fullData);\n\n        intervalId = setInterval(function () {\n            chart.pushNewData({ 'x': i, 'y': i * 0.3 }, '1');\n            chart2.pushNewData({ 'x': i, 'y': i * 0.9 }, '1');\n            i += 20;\n\n            if (i > 5000) {\n                clearInterval(intervalId);\n            }\n        }, 1000);\n    });\n});\n/* ------------------ */\n\n/* MultiCharts */\n(0, _MultiCharts2.default)();\n/* ------------------ */\n\n/* Band Zoom */\n(0, _BandZoom2.default)();\n/* ------------------ */\n\n/*\nvar scale = d3.scaleLinear()\n    .domain([1, 5])   // Data space\n    .range([0, 200]); // Pixel space\nvar svg = d3.select(\"body\").append(\"svg\")\n    .attr(\"width\",  350)\n    .attr(\"height\", 250);\nfunction render(data, color){\n    // Bind data\n    var rects = svg.selectAll(\"rect\").data(data);\n    console.log('adsfasdf')\n    rects.exit().remove()\n\n    rects.enter().append(\"rect\")\n        .attr(\"x\", function(x) {console.log(x); return scale(x)})\n        .attr(\"y\", 50)\n        .attr(\"width\",  20)\n        .attr(\"height\", 20)\n        .merge(rects)\n        .attr(\"fill\", color)\n\n}\nsetTimeout(function() {render([1, 2, 3, 4, 5], \"blue\")}, 1000);\nsetTimeout(function() {render([1, 2, 3, 4, 5, 6], \"red\")}, 4000);*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJjaGFydCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNoYXJ0MiIsImNvbnNvbGUiLCJsb2ciLCJmdWxsRGF0YSIsImludGVydmFsSWQiLCJpIiwiZDMiLCJjc3YiLCJkYXRhIiwiY29sdW1ucyIsImZvckVhY2giLCJkIiwieCIsInkiLCJkYXRhMiIsInNldERhdGEiLCJzZXRJbnRlcnZhbCIsInB1c2hOZXdEYXRhIiwiY2xlYXJJbnRlcnZhbCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7QUFDQTs7Ozs7Ozs7QUFRQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSUEsUUFBUSxvQkFBVUMsU0FBU0MsYUFBVCxDQUF1QixhQUF2QixDQUFWLENBQVo7QUFBQSxJQUNJQyxTQUFTLG9CQUFVRixTQUFTQyxhQUFULENBQXVCLGFBQXZCLENBQVYsQ0FEYjs7QUFHQUUsUUFBUUMsR0FBUixDQUFZTCxLQUFaOztBQUVBLElBQUlNLFdBQVcsRUFBZjtBQUFBLElBQ0lDLGFBQWEsSUFEakI7QUFBQSxJQUVJQyxJQUFJLEVBRlI7O0FBSUFDLEdBQUdDLEdBQUgsQ0FBTyxZQUFQLEVBQXFCLFVBQVNDLElBQVQsRUFBZTtBQUNoQyxRQUFJQyxVQUFVRCxLQUFLLFNBQUwsQ0FBZDtBQUNBQSxTQUFLRSxPQUFMLENBQWEsVUFBU0MsQ0FBVCxFQUFZO0FBQ3JCQSxVQUFFQyxDQUFGLEdBQU0sQ0FBQ0QsRUFBRUMsQ0FBSCxHQUFPLEVBQWI7QUFDQUQsVUFBRUUsQ0FBRixHQUFNLENBQUNGLEVBQUVFLENBQVQ7QUFDSCxLQUhEOztBQUtBLFdBQU9MLEtBQUssU0FBTCxDQUFQOztBQUVBTCxhQUFTLEdBQVQsSUFBZ0JLLElBQWhCOztBQUVBRixPQUFHQyxHQUFILENBQU8sY0FBUCxFQUF1QixVQUFTTyxLQUFULEVBQWdCO0FBQ25DQSxjQUFNSixPQUFOLENBQWMsVUFBU0MsQ0FBVCxFQUFZO0FBQ3RCQSxjQUFFQyxDQUFGLEdBQU0sQ0FBQ0QsRUFBRUMsQ0FBSCxHQUFPLEVBQWI7QUFDQUQsY0FBRUUsQ0FBRixHQUFNLENBQUNGLEVBQUVFLENBQVQ7QUFDSCxTQUhEOztBQUtBLGVBQU9DLE1BQU0sU0FBTixDQUFQOztBQUVBWCxpQkFBUyxHQUFULElBQWdCVyxLQUFoQjs7QUFFQVgsaUJBQVMsR0FBVCxJQUFnQixDQUFDLEVBQUMsS0FBSyxDQUFOLEVBQVMsS0FBSyxDQUFkLEVBQUQsQ0FBaEI7O0FBRUFOLGNBQU1rQixPQUFOLENBQWNaLFFBQWQ7QUFDQUgsZUFBT2UsT0FBUCxDQUFlWixRQUFmOztBQUVBQyxxQkFBYVksWUFBWSxZQUFXO0FBQ2hDbkIsa0JBQU1vQixXQUFOLENBQWtCLEVBQUMsS0FBS1osQ0FBTixFQUFTLEtBQUtBLElBQUUsR0FBaEIsRUFBbEIsRUFBd0MsR0FBeEM7QUFDQUwsbUJBQU9pQixXQUFQLENBQW1CLEVBQUMsS0FBS1osQ0FBTixFQUFTLEtBQUtBLElBQUUsR0FBaEIsRUFBbkIsRUFBeUMsR0FBekM7QUFDQUEsaUJBQUssRUFBTDs7QUFFQSxnQkFBSUEsSUFBSSxJQUFSLEVBQWM7QUFDVmEsOEJBQWNkLFVBQWQ7QUFDSDtBQUNKLFNBUlksRUFRVixJQVJVLENBQWI7QUFTSCxLQXhCRDtBQXlCSCxDQXBDRDtBQXFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFNpbXBsZUNoYXJ0IGZyb20gJy4vU2ltcGxlQ2hhcnQnXG5pbXBvcnQgUm93Q2hhcnQgZnJvbSAnLi9Sb3dDaGFydCdcbmltcG9ydCBNdWx0aUNoYXJ0cyBmcm9tICcuL011bHRpQ2hhcnRzJ1xuaW1wb3J0IEJhbmRab29tIGZyb20gJy4vQmFuZFpvb20nXG5pbXBvcnQgQ2hhcnQgZnJvbSAnLi9DaGFydCdcblxuLyogU2ltcGxlQ2hhcnQgY2xhc3MqL1xuLyp2YXIgbWFpbkNoYXJ0ID0gbmV3IFNpbXBsZUNoYXJ0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1jaGFydFwiKSk7XG5cbmZldGNoKFwiLi9kYXRhLmpzb25cIilcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgbWFpbkNoYXJ0LnNldERhdGEoZGF0YSk7XG4gICAgICAgIG1haW5DaGFydC5yZW5kZXJDaGFydCgpO1xuICAgIH0pKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKiBSb3dDaGFydCAqL1xuLypSb3dDaGFydChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tY2hhcnRcIikpKi9cblxuLyogVE9ETzog0L3QtdC/0YDQsNCy0LjQu9GM0L3QviDRgNCw0LHQvtGC0LDQtdGCINGB0L7Qt9C00LDQvdC40LUg0L3QtdGB0LrQvtC70YzQutC40YUg0LPRgNCw0YTQuNC60L7Qsiwg0LjRgdC/0YDQsNCy0LjRgtGMICovXG52YXIgY2hhcnQgPSBuZXcgQ2hhcnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLWNoYXJ0XCIpKSxcbiAgICBjaGFydDIgPSBuZXcgQ2hhcnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluLWNoYXJ0XCIpKTtcblxuY29uc29sZS5sb2coY2hhcnQpO1xuXG52YXIgZnVsbERhdGEgPSB7fSxcbiAgICBpbnRlcnZhbElkID0gbnVsbCxcbiAgICBpID0gMjA7XG5cbmQzLmNzdignLi9kYXRhLmNzdicsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB2YXIgY29sdW1ucyA9IGRhdGFbJ2NvbHVtbnMnXTtcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24oZCkge1xuICAgICAgICBkLnggPSArZC54ICogNjA7XG4gICAgICAgIGQueSA9ICtkLnk7XG4gICAgfSk7XG5cbiAgICBkZWxldGUgZGF0YVsnY29sdW1ucyddXG5cbiAgICBmdWxsRGF0YVsnMSddID0gZGF0YTtcblxuICAgIGQzLmNzdignLi9kYXRhLTIuY3N2JywgZnVuY3Rpb24oZGF0YTIpIHtcbiAgICAgICAgZGF0YTIuZm9yRWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBkLnggPSArZC54ICogNjA7XG4gICAgICAgICAgICBkLnkgPSArZC55O1xuICAgICAgICB9KVxuXG4gICAgICAgIGRlbGV0ZSBkYXRhMlsnY29sdW1ucyddXG5cbiAgICAgICAgZnVsbERhdGFbJzInXSA9IGRhdGEyO1xuXG4gICAgICAgIGZ1bGxEYXRhWycxJ10gPSBbeyd4JzogMCwgJ3knOiAwfV07XG5cbiAgICAgICAgY2hhcnQuc2V0RGF0YShmdWxsRGF0YSlcbiAgICAgICAgY2hhcnQyLnNldERhdGEoZnVsbERhdGEpXG5cbiAgICAgICAgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2hhcnQucHVzaE5ld0RhdGEoeyd4JzogaSwgJ3knOiBpKjAuM30sICcxJyk7XG4gICAgICAgICAgICBjaGFydDIucHVzaE5ld0RhdGEoeyd4JzogaSwgJ3knOiBpKjAuOX0sICcxJyk7XG4gICAgICAgICAgICBpICs9IDIwO1xuXG4gICAgICAgICAgICBpZiAoaSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwKTtcbiAgICB9KTtcbn0pXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuLyogTXVsdGlDaGFydHMgKi9cbk11bHRpQ2hhcnRzKClcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKiBCYW5kIFpvb20gKi9cbkJhbmRab29tKClcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4vKlxudmFyIHNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgIC5kb21haW4oWzEsIDVdKSAgIC8vIERhdGEgc3BhY2VcbiAgICAucmFuZ2UoWzAsIDIwMF0pOyAvLyBQaXhlbCBzcGFjZVxudmFyIHN2ZyA9IGQzLnNlbGVjdChcImJvZHlcIikuYXBwZW5kKFwic3ZnXCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCAgMzUwKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIDI1MCk7XG5mdW5jdGlvbiByZW5kZXIoZGF0YSwgY29sb3Ipe1xuICAgIC8vIEJpbmQgZGF0YVxuICAgIHZhciByZWN0cyA9IHN2Zy5zZWxlY3RBbGwoXCJyZWN0XCIpLmRhdGEoZGF0YSk7XG4gICAgY29uc29sZS5sb2coJ2Fkc2Zhc2RmJylcbiAgICByZWN0cy5leGl0KCkucmVtb3ZlKClcblxuICAgIHJlY3RzLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oeCkge2NvbnNvbGUubG9nKHgpOyByZXR1cm4gc2NhbGUoeCl9KVxuICAgICAgICAuYXR0cihcInlcIiwgNTApXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIiwgIDIwKVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCAyMClcbiAgICAgICAgLm1lcmdlKHJlY3RzKVxuICAgICAgICAuYXR0cihcImZpbGxcIiwgY29sb3IpXG5cbn1cbnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7cmVuZGVyKFsxLCAyLCAzLCA0LCA1XSwgXCJibHVlXCIpfSwgMTAwMCk7XG5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge3JlbmRlcihbMSwgMiwgMywgNCwgNSwgNl0sIFwicmVkXCIpfSwgNDAwMCk7Ki9cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SimpleChart = function () {\n    function SimpleChart(container, data, options) {\n        var _this = this;\n\n        _classCallCheck(this, SimpleChart);\n\n        this.options = options === undefined ? Object.assign({}, this.getDefaultParams()) : Object.assign({}, this.getDefaultParams(), options);\n        this.data = data === undefined ? [] : data;\n\n        this.x = d3.scaleLinear().rangeRound([0, this.options.width]);\n        this.y = d3.scaleLinear().rangeRound([this.options.height, 0]);\n        this.g = null;\n\n        this.area = d3.area().x(function (d) {\n            return _this.x(d.x);\n        }).y1(function (d) {\n            return _this.y(d.y);\n        });\n\n        this.options.chartClassName = 'chart_' + new Date().getTime();\n\n        this.chartContainer = container;\n\n        this.svg = null;\n        this.svgBlock = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.svgBlock.setAttribute(\"width\", this.options.width);\n        this.svgBlock.setAttribute(\"height\", this.options.height);\n        this.svgBlock.setAttribute(\"class\", this.options.chartClassName);\n    }\n\n    _createClass(SimpleChart, [{\n        key: \"getDefaultParams\",\n        value: function getDefaultParams() {\n            return {\n                // Size\n                width: 960,\n                height: 500,\n                // Padding\n                paddingTop: 40,\n                paddingRight: 30,\n                paddingBottom: 60,\n                paddingLeft: 70,\n                // Margin\n                marginTop: 20,\n                marginRight: 20,\n                marginBottom: 30,\n                marginLeft: 50,\n                // Max and Min values\n                xMax: 100,\n                xMin: 0,\n                yMax: 100,\n                yMin: 0,\n                // Text\n                title: 'Simple Chart',\n                xLabel: 'x axis',\n                yLabel: 'y axis'\n            };\n        }\n    }, {\n        key: \"setData\",\n        value: function setData(data) {\n            this.data = data;\n        }\n    }, {\n        key: \"pushNewData\",\n        value: function pushNewData(newData) {\n            if (Object.prototype.toString.call(data).indexOf(\"Array\") === -1) {\n                throw new TypeError(\"Argument 'data' must be an array.\");\n            }\n\n            this.setData(this.data.concat(newData));\n        }\n    }, {\n        key: \"updateAxis\",\n        value: function updateAxis() {\n            this.g.selectAll(\"g.x-axis\").call(d3.axisBottom(this.x));\n            this.g.selectAll(\"g.y-axis\").call(d3.axisLeft(this.y));\n        }\n    }, {\n        key: \"renderChart\",\n        value: function renderChart() {\n            if (this.data.length === 0) return;\n            var pureWidth = this.options.width - this.options.marginLeft - this.options.marginRight,\n                pureHeight = this.options.height - this.options.marginTop - this.options.marginBottom,\n                x = this.x,\n                y = this.y,\n                g = this.g,\n                area = this.area,\n                data = this.data,\n                svg = this.svg;\n\n            this.chartContainer.appendChild(this.svgBlock);\n            svg = d3.select(\".\" + this.options.chartClassName); // TODO попробовать передать объект, а не className\n\n            x.domain(d3.extent(data, function (d) {\n                return d.x;\n            }));\n            y.domain(d3.extent(data, function (d) {\n                return d.y;\n            }));\n            /*y.domain([0, d3.max(data, d => d.y)])*/\n            area.y0(y(0));\n\n            g = svg.append(\"g\").attr(\"transform\", \"translate(\" + this.options.marginLeft + \", \" + this.options.marginTop + \")\");\n\n            g.append(\"path\").datum(data).attr(\"fill\", \"white\").attr(\"stroke\", \"steelblue\").attr(\"d\", area);\n\n            // TODO добавить добавление текста из options\n\n            g.append(\"g\").attr(\"transform\", \"translate(0, \" + pureHeight + \")\").attr(\"class\", \"x-axis\").call(d3.axisBottom(x));\n\n            g.append(\"g\").attr(\"class\", \"y-axis\").call(d3.axisLeft(y)).append(\"text\").attr(\"fill\", \"#000\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"text-anchor\", \"end\").text(\"Number\");\n        }\n    }, {\n        key: \"updateChart\",\n        value: function updateChart() {\n            var x = this.x,\n                y = this.y,\n                data = this.data;\n            x.domain(d3.extent(data, function (d) {\n                return d.x;\n            }));\n            /*y.domain([0, d3.max(data, d => d.x)]);*/\n            y.domain(d3.extent(data, function (d) {\n                return d.y;\n            }));\n            this.svg.selectAll(\"path\").data([data]).attr(\"d\", area);\n\n            this.updateAxis(x, y);\n        }\n    }]);\n\n    return SimpleChart;\n}();\n\nexports.default = SimpleChart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction RowChart() {\n    var svg = d3.select(\"svg\"),\n        margin = { top: 20, right: 20, bottom: 30, left: 50 },\n        width = +svg.attr(\"width\") - margin.left - margin.right,\n        height = +svg.attr(\"height\") - margin.top - margin.bottom,\n        g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"),\n        dataAcc = null,\n        dataMap = {},\n        drawing = false,\n        zoomed = false,\n        x = d3.scaleLinear().rangeRound([0, width]),\n        y = d3.scaleLinear().rangeRound([height, 0]),\n        colors = d3.scaleOrdinal(d3.schemeCategory10),\n        area = d3.area().x(function (d) {\n        return x(d.x);\n    }).y1(function (d) {\n        return y(d.y);\n    }),\n        bandPos = [-1, -1],\n        drag = d3.drag(),\n        xdomain = [],\n        ydomain = [],\n        currentXdomain = [],\n        currentYdomain = [],\n        zoomout = g.append(\"g\");\n\n    zoomout.append(\"rect\").attr(\"class\", \"zoomOut\").attr(\"width\", 155).attr(\"height\", 40).attr(\"x\", -12).attr(\"y\", height + (margin.bottom - 20)).on(\"click\", function () {\n        zoomOut();\n    });\n\n    zoomout.append(\"text\").attr(\"class\", \"zoomOutText\").attr(\"width\", 155).attr(\"height\", 30).attr(\"x\", -10).attr(\"y\", height + (margin.bottom - 5)).text(\"Сбросить увеличение\");\n\n    var line = d3.line().curve(d3.curveBasis).x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    });\n\n    var band = g.append(\"rect\").attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"band\");\n\n    g.append(\"clipPath\").attr(\"id\", \"clip-main\").append(\"rect\").attr(\"width\", width).attr(\"height\", height);\n\n    g.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").attr(\"class\", \"x-axis\");\n\n    g.append(\"g\").attr(\"class\", \"y-axis\").append(\"text\").attr(\"fill\", \"#000\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"text-anchor\", \"end\").text(\"Попугаи\");\n\n    var zoomOverlay = g.append(\"rect\").attr(\"width\", width - 10).attr(\"height\", height).attr(\"class\", \"zoomOverlay\").call(drag);\n\n    drag.on(\"end\", function () {\n        var pos = d3.mouse(this);\n        var x1 = x.invert(bandPos[0]);\n        var x2 = x.invert(pos[0]);\n        var xdomainTmp = [];\n        var ydomainTmp = [];\n\n        if (x1 < x2) {\n            xdomainTmp[0] = x1;\n            xdomainTmp[1] = x2;\n        } else {\n            xdomainTmp[0] = x2;\n            xdomainTmp[1] = x1;\n        }\n\n        var y1 = y.invert(pos[1]);\n        var y2 = y.invert(bandPos[1]);\n\n        if (y1 < y2) {\n            ydomainTmp[0] = y1;\n            ydomainTmp[1] = y2;\n        } else {\n            ydomainTmp[0] = y2;\n            ydomainTmp[1] = y1;\n        }\n\n        bandPos = [-1, -1];\n\n        g.select(\".band\").transition().attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", bandPos[0]).attr(\"y\", bandPos[1]);\n\n        zoom(xdomainTmp, ydomainTmp);\n    });\n\n    drag.on(\"drag\", function () {\n\n        var pos = d3.mouse(this);\n\n        if (pos[0] < bandPos[0]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + bandPos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + pos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1] && pos[0] > bandPos[0]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + pos[1] + \")\");\n        }\n\n        //set new position of band when user initializes drag\n        if (bandPos[0] == -1) {\n            bandPos = pos;\n            g.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + bandPos[1] + \")\");\n        }\n\n        g.select(\".band\").transition().duration(1).attr(\"width\", Math.abs(bandPos[0] - pos[0])).attr(\"height\", Math.abs(bandPos[1] - pos[1]));\n    });\n\n    function renderChart(dataSet) {\n        /* Рассчёт границ по данным */\n        xdomain = [d3.min(dataSet, function (c) {\n            return d3.min(c.values, function (d) {\n                return d.x;\n            });\n        }), d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.x;\n            });\n        })];\n\n        ydomain = [0, d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.y;\n            });\n        })];\n\n        currentXdomain = xdomain;\n        currentYdomain = ydomain;\n\n        /* Рассчёт цветов */\n        colors.domain(dataSet.map(function (c) {\n            return c.id;\n        }));\n\n        /* Установка границ по данным */\n        x.domain(currentXdomain);\n        y.domain(currentYdomain);\n\n        /* Обновление осей */\n        updateAxis(x, y);\n\n        /* Применение новых данных */\n        var lines = g.selectAll(\".city\").data(dataSet).enter().append(\"g\").attr(\"class\", \"city\");\n\n        /* Удаление лишнего, если нужно */\n        lines.exit().remove();\n\n        lines.append(\"path\").attr(\"class\", \"line\").attr(\"clip-path\", \"url(#clip-main)\").style(\"stroke\", function (d) {\n            return colors(d.id);\n        }).attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    /* Перерисовка всего графика */\n    function _reRenderChart(dataSet) {\n        /* Рассчёт границ по данным */\n\n        if (!zoomed) {\n            currentXdomain = [d3.min(dataSet, function (c) {\n                return d3.min(c.values, function (d) {\n                    return d.x;\n                });\n            }), d3.max(dataSet, function (c) {\n                return d3.max(c.values, function (d) {\n                    return d.x;\n                });\n            })];\n\n            currentYdomain = [0, d3.max(dataSet, function (c) {\n                return d3.max(c.values, function (d) {\n                    return d.y;\n                });\n            })];\n        }\n\n        /* Рассчёт цветов */\n        colors.domain(dataSet.map(function (c) {\n            return c.id;\n        }));\n\n        /* Установка границ по данным */\n        x.domain(currentXdomain);\n        y.domain(currentYdomain);\n\n        /* Обновление осей */\n        updateAxis(x, y);\n\n        /* Применение новых данных */\n        var lines = g.selectAll(\".city\").data(dataSet).enter().append(\"g\").attr(\"class\", \"city\");\n\n        /* Удаление лишнего, если нужно */\n        lines.exit().remove();\n\n        /* Перерисовка всех линий на графике */\n        g.selectAll(\".line\").attr(\"clip-path\", \"url(#clip-main)\").style(\"stroke\", function (d) {\n            return colors(d.id);\n        }).attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    function _mapToArr(localMap) {\n        return Object.keys(localMap).map(function (key) {\n            return { id: key, values: localMap[key] };\n        });\n    }\n\n    function updateAxis(localX, localY) {\n        g.selectAll(\".x-axis\").call(d3.axisBottom(localX));\n        g.selectAll(\".y-axis\").call(d3.axisLeft(localY));\n    }\n\n    function setData(localDataMap) {\n        if (!localDataMap || Object.prototype.toString.call(localDataMap) !== '[object Object]') {\n            return null;\n        }\n\n        dataMap = localDataMap;\n\n        // TODO вынести наверх\n        renderChart(_mapToArr(dataMap));\n\n        return dataMap;\n    }\n\n    function pushNewData(newData, lineId) {\n        if (!newData || Object.prototype.toString.call(newData) !== '[object Object]') {\n            return null;\n        }\n\n        dataMap[lineId].push(newData);\n\n        // TODO вынести наверх\n        _reRenderChart(_mapToArr(dataMap));\n\n        /*if (drawing) {\n            if (!dataAcc){\n                dataAcc = {};\n            }\n             if (!dataAcc[lineId]) {\n                dataAcc[lineId] = [];\n            }\n             dataAcc[lineId].push(newData);\n        } else {\n            /!*if (dataAcc) {\n                for (var key in dataAcc) {\n                    dataMap[key] = dataMap[key].concat(dataAcc[key]);\n                }\n                clearDataAcc()\n            }*!/\n             dataMap[lineId].push(newData)\n             // TODO вынести наверх\n            _reRenderChart(_mapToArr(dataMap));\n        }*/\n    }\n\n    function clearDataAcc() {\n        dataAcc = null;\n    }\n\n    function zoom(xdomainTmp, ydomainTmp) {\n        zoomed = true;\n        currentYdomain = ydomainTmp;\n        currentXdomain = xdomainTmp;\n        //recalculate domains\n        if (currentXdomain[0] > currentXdomain[1]) {\n            x.domain([currentXdomain[1], currentXdomain[0]]);\n        } else {\n            x.domain([currentXdomain[0], currentXdomain[1]]);\n        }\n\n        if (currentYdomain[0] > currentYdomain[1]) {\n            y.domain([currentYdomain[1], currentYdomain[0]]);\n        } else {\n            y.domain([currentYdomain[0], currentYdomain[1]]);\n        }\n\n        //update axis and redraw lines\n        var t = g.transition().duration(750);\n        t.on(\"start\", function () {\n            drawing = true;\n        });\n        t.on(\"end\", function () {\n            drawing = false;\n        });\n        t.select(\".x-axis\").call(d3.axisBottom(x));\n        t.select(\".y-axis\").call(d3.axisLeft(y));\n\n        t.selectAll(\".line\").attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    var zoomOut = function zoomOut() {\n        var dataSet = _mapToArr(dataMap);\n        var t = g.transition().duration(750);\n\n        t.on(\"start\", function () {\n            drawing = true;\n        });\n        t.on(\"end\", function () {\n            drawing = false;\n        });\n        xdomain = [d3.min(dataSet, function (c) {\n            return d3.min(c.values, function (d) {\n                return d.x;\n            });\n        }), d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.x;\n            });\n        })];\n\n        ydomain = [0, d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.y;\n            });\n        })];\n        x.domain(xdomain);\n        y.domain(ydomain);\n        t.select(\".x-axis\").call(d3.axisBottom(x));\n        t.select(\".y-axis\").call(d3.axisLeft(y));\n\n        t.selectAll(\".line\").attr(\"d\", function (d) {\n            return line(d.values);\n        });\n        zoomed = false;\n    };\n\n    window.renderChart = renderChart;\n    window._reRenderChart = _reRenderChart;\n    window.setData = setData;\n    window.pushNewData = pushNewData;\n}\n\n/*var fullData = {},\n    intervalId = null,\n    i = 20;\n\nd3.csv('./data.csv', function(data) {\n    var columns = data['columns'];\n    data.forEach(function(d) {\n        d.x = +d.x * 60;\n        d.y = +d.y;\n    });\n\n    delete data['columns']\n\n    fullData['1'] = data;\n\n    d3.csv('./data-2.csv', function(data2) {\n        data2.forEach(function(d) {\n            d.x = +d.x * 60;\n            d.y = +d.y;\n        })\n\n        delete data2['columns']\n\n        fullData['2'] = data2;\n\n        fullData['1'] = [{'x': 0, 'y': 0}];\n\n        setData(fullData)\n\n        intervalId = setInterval(function() {\n            pushNewData({'x': i, 'y': i*0.3}, '1');\n            i += 20;\n\n            if (i > 5000) {\n                clearInterval(intervalId);\n            }\n        }, 1000);\n    });\n})*/\n\nexports.default = RowChart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction MultiCharts() {\n    var svg = d3.select(\"svg.multi\"),\n        margin = { top: 20, right: 80, bottom: 30, left: 50 },\n        width = svg.attr(\"width\") - margin.left - margin.right,\n        height = svg.attr(\"height\") - margin.top - margin.bottom,\n        g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var parseTime = d3.timeParse(\"%Y%m%d\");\n\n    var x = d3.scaleTime().range([0, width]),\n        y = d3.scaleLinear().range([height, 0]),\n        colors = d3.scaleOrdinal(d3.schemeCategory10);\n\n    var line = d3.line()\n    /*.curve(d3.curveBasis)*/\n    .x(function (d) {\n        return x(d.date);\n    }).y(function (d) {\n        return y(d.temperature);\n    });\n\n    d3.tsv(\"data.tsv\", type, function (error, data) {\n        if (error) throw error;\n\n        var cities = data.columns.slice(1).map(function (id) {\n            return {\n                id: id,\n                values: data.map(function (d) {\n                    return { date: d.date, temperature: d[id] };\n                })\n            };\n        });\n\n        x.domain(d3.extent(data, function (d) {\n            return d.date;\n        }));\n\n        y.domain([d3.min(cities, function (c) {\n            return d3.min(c.values, function (d) {\n                return d.temperature;\n            });\n        }), d3.max(cities, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.temperature;\n            });\n        })]);\n\n        colors.domain(cities.map(function (c) {\n            return c.id;\n        }));\n\n        g.append(\"g\").attr(\"class\", \"axis axis--x\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n\n        g.append(\"g\").attr(\"class\", \"axis axis--y\").call(d3.axisLeft(y)).append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"fill\", \"#000\").text(\"Temperature, ºF\");\n\n        var city = g.selectAll(\".city\").data(cities).enter().append(\"g\").attr(\"class\", \"city\");\n\n        city.append(\"path\").attr(\"class\", \"line\").attr(\"d\", function (d) {\n            return line(d.values);\n        }).style(\"stroke\", function (d) {\n            return colors(d.id);\n        });\n\n        city.selectAll('circle').data(function (d) {\n            return d.values;\n        }).enter().append('circle').attr('cx', function (d) {\n            return x(d.date);\n        }).attr('cy', function (d) {\n            return y(d.temperature);\n        }).attr('r', 3);\n\n        city.append(\"text\").datum(function (d) {\n            return { id: d.id, value: d.values[d.values.length - 1] };\n        }).attr(\"transform\", function (d) {\n            return \"translate(\" + x(d.value.date) + \",\" + y(d.value.temperature) + \")\";\n        }).attr(\"x\", 3).attr(\"dy\", \"0.35em\").style(\"font\", \"10px sans-serif\").text(function (d) {\n            return d.id;\n        });\n    });\n\n    function type(d, _, columns) {\n        d.date = parseTime(d.date);\n        for (var i = 1, n = columns.length, c; i < n; ++i) {\n            d[c = columns[i]] = +d[c];\n        }return d;\n    }\n}\n\nexports.default = MultiCharts;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction BandZoom() {\n    var data = [];\n    var bandPos = [-1, -1];\n    var pos;\n    var xdomain = 500;\n    var ydomain = 50;\n    var colors = [\"steelblue\", \"green\"];\n    var idx;\n\n    var margin = {\n        top: 40,\n        right: 40,\n        bottom: 50,\n        left: 60\n    };\n    var width = 960 - margin.left - margin.right;\n    var height = 500 - margin.top - margin.bottom;\n    var zoomArea = {\n        x1: 0,\n        y1: 0,\n        x2: xdomain,\n        y2: ydomain\n    };\n    var drag = d3.drag();\n\n    //data for testing\n    var d1 = [];\n    var d2 = [];\n\n    for (var i = 0; i < xdomain; i++) {\n        d1.push([i, Math.random() * 20 + 10]);\n        d2.push([i, Math.random() * 10 + 10]);\n    }\n\n    data.push(d1);\n    data.push(d2);\n\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    var x = d3.scaleLinear().range([0, width]).domain([0, xdomain]);\n\n    var y = d3.scaleLinear().range([height, 0]).domain([0, ydomain]);\n\n    var xAxis = d3.axisBottom(x);\n\n    var yAxis = d3.axisLeft(y);\n\n    var line = d3.line().curve(d3.curveBasis).x(function (d) {\n        return x(d[0]);\n    }).y(function (d) {\n        return y(d[1]);\n    });\n\n    var band = svg.append(\"rect\").attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"band\");\n\n    svg.append(\"g\").attr(\"class\", \"x axis\").call(xAxis).attr(\"transform\", \"translate(0,\" + height + \")\");\n\n    svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis);\n\n    svg.append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\").attr(\"width\", width).attr(\"height\", height);\n\n    for (idx in data) {\n        svg.append(\"path\").datum(data[idx]).attr(\"class\", \"line line\" + idx).attr(\"clip-path\", \"url(#clip)\").style(\"stroke\", colors[idx]).attr(\"d\", line);\n    }\n\n    var zoomOverlay = svg.append(\"rect\").attr(\"width\", width - 10).attr(\"height\", height).attr(\"class\", \"zoomOverlay\").call(drag);\n\n    var zoomout = svg.append(\"g\");\n\n    zoomout.append(\"rect\").attr(\"class\", \"zoomOut\").attr(\"width\", 155).attr(\"height\", 40).attr(\"x\", -12).attr(\"y\", height + (margin.bottom - 20)).on(\"click\", function () {\n        zoomOut();\n    });\n\n    zoomout.append(\"text\").attr(\"class\", \"zoomOutText\").attr(\"width\", 155).attr(\"height\", 30).attr(\"x\", -10).attr(\"y\", height + (margin.bottom - 5)).text(\"Сбросить увеличение\");\n\n    zoom();\n\n    drag.on(\"end\", function () {\n        var pos = d3.mouse(this);\n        var x1 = x.invert(bandPos[0]);\n        var x2 = x.invert(pos[0]);\n\n        if (x1 < x2) {\n            zoomArea.x1 = x1;\n            zoomArea.x2 = x2;\n        } else {\n            zoomArea.x1 = x2;\n            zoomArea.x2 = x1;\n        }\n\n        var y1 = y.invert(pos[1]);\n        var y2 = y.invert(bandPos[1]);\n\n        if (x1 < x2) {\n            zoomArea.y1 = y1;\n            zoomArea.y2 = y2;\n        } else {\n            zoomArea.y1 = y2;\n            zoomArea.y2 = y1;\n        }\n\n        bandPos = [-1, -1];\n\n        svg.select(\".band\").transition().attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", bandPos[0]).attr(\"y\", bandPos[1]);\n\n        zoom();\n    });\n\n    drag.on(\"drag\", function () {\n\n        var pos = d3.mouse(this);\n\n        if (pos[0] < bandPos[0]) {\n            svg.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + bandPos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1]) {\n            svg.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + pos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1] && pos[0] > bandPos[0]) {\n            svg.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + pos[1] + \")\");\n        }\n\n        //set new position of band when user initializes drag\n        if (bandPos[0] == -1) {\n            bandPos = pos;\n            svg.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + bandPos[1] + \")\");\n        }\n\n        svg.select(\".band\").transition().duration(1).attr(\"width\", Math.abs(bandPos[0] - pos[0])).attr(\"height\", Math.abs(bandPos[1] - pos[1]));\n    });\n\n    function zoom() {\n        //recalculate domains\n        if (zoomArea.x1 > zoomArea.x2) {\n            x.domain([zoomArea.x2, zoomArea.x1]);\n        } else {\n            x.domain([zoomArea.x1, zoomArea.x2]);\n        }\n\n        if (zoomArea.y1 > zoomArea.y2) {\n            y.domain([zoomArea.y2, zoomArea.y1]);\n        } else {\n            y.domain([zoomArea.y1, zoomArea.y2]);\n        }\n\n        //update axis and redraw lines\n        var t = svg.transition().duration(750);\n\n        t.select(\".x.axis\").call(xAxis);\n        t.select(\".y.axis\").call(yAxis);\n\n        t.selectAll(\".line\").attr(\"d\", line);\n    }\n\n    var zoomOut = function zoomOut() {\n        x.domain([0, xdomain]);\n        y.domain([0, ydomain]);\n\n        var t = svg.transition().duration(750);\n        console.log(t.select(\".x.axis\").call(xAxis));\n        console.log(t.select(\".y.axis\").call(yAxis));\n\n        t.selectAll(\".line\").attr(\"d\", line);\n    };\n}\n\nexports.default = BandZoom;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction Chart(container) {\n    var svg = d3.select(container).append(\"svg\").attr(\"width\", 960).attr(\"height\", 500),\n        margin = { top: 20, right: 20, bottom: 30, left: 50 },\n        width = +svg.attr(\"width\") - margin.left - margin.right,\n        height = +svg.attr(\"height\") - margin.top - margin.bottom,\n        g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"),\n        drawing = false,\n        zoomed = false,\n        x = d3.scaleLinear().rangeRound([0, width]),\n        y = d3.scaleLinear().rangeRound([height, 0]),\n        colors = d3.scaleOrdinal(d3.schemeCategory10),\n        bandPos = [-1, -1],\n        drag = d3.drag(),\n        xdomain = [],\n        ydomain = [],\n        zoomout = g.append(\"g\");\n\n    this.dataMap = {};\n\n    zoomout.append(\"rect\").attr(\"class\", \"zoomOut\").attr(\"width\", 155).attr(\"height\", 40).attr(\"x\", -12).attr(\"y\", height + (margin.bottom - 20)).on(\"click\", function () {\n        zoomOut();\n    });\n\n    zoomout.append(\"text\").attr(\"class\", \"zoomOutText\").attr(\"width\", 155).attr(\"height\", 30).attr(\"x\", -10).attr(\"y\", height + (margin.bottom - 5)).text(\"Сбросить увеличение\");\n\n    var line = d3.line().curve(d3.curveBasis).x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    });\n\n    var band = g.append(\"rect\").attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"band\");\n\n    g.append(\"clipPath\").attr(\"id\", \"clip-main\").append(\"rect\").attr(\"width\", width).attr(\"height\", height);\n\n    g.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").attr(\"class\", \"x-axis\");\n\n    g.append(\"g\").attr(\"class\", \"y-axis\").append(\"text\").attr(\"fill\", \"#000\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \"0.71em\").attr(\"text-anchor\", \"end\").text(\"Попугаи\");\n\n    var zoomOverlay = g.append(\"rect\").attr(\"width\", width - 10).attr(\"height\", height).attr(\"class\", \"zoomOverlay\").call(drag);\n\n    drag.on(\"end\", function () {\n        var pos = d3.mouse(this);\n        var x1 = x.invert(bandPos[0]);\n        var x2 = x.invert(pos[0]);\n        var xdomainTmp = [];\n        var ydomainTmp = [];\n\n        if (x1 < x2) {\n            xdomainTmp[0] = x1;\n            xdomainTmp[1] = x2;\n        } else {\n            xdomainTmp[0] = x2;\n            xdomainTmp[1] = x1;\n        }\n\n        var y1 = y.invert(pos[1]);\n        var y2 = y.invert(bandPos[1]);\n\n        if (y1 < y2) {\n            ydomainTmp[0] = y1;\n            ydomainTmp[1] = y2;\n        } else {\n            ydomainTmp[0] = y2;\n            ydomainTmp[1] = y1;\n        }\n\n        bandPos = [-1, -1];\n\n        g.select(\".band\").transition().attr(\"width\", 0).attr(\"height\", 0).attr(\"x\", bandPos[0]).attr(\"y\", bandPos[1]);\n\n        zoom(xdomainTmp, ydomainTmp);\n    });\n\n    drag.on(\"drag\", function () {\n\n        var pos = d3.mouse(this);\n\n        if (pos[0] < bandPos[0]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + bandPos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + pos[0] + \",\" + pos[1] + \")\");\n        }\n        if (pos[1] < bandPos[1] && pos[0] > bandPos[0]) {\n            g.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + pos[1] + \")\");\n        }\n\n        //set new position of band when user initializes drag\n        if (bandPos[0] == -1) {\n            bandPos = pos;\n            g.select(\".band\").attr(\"transform\", \"translate(\" + bandPos[0] + \",\" + bandPos[1] + \")\");\n        }\n\n        g.select(\".band\").transition().duration(1).attr(\"width\", Math.abs(bandPos[0] - pos[0])).attr(\"height\", Math.abs(bandPos[1] - pos[1]));\n    });\n\n    function renderChart(dataSet) {\n        /* Рассчёт границ по данным */\n        xdomain = [d3.min(dataSet, function (c) {\n            return d3.min(c.values, function (d) {\n                return d.x;\n            });\n        }), d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.x;\n            });\n        })];\n\n        ydomain = [0, d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.y;\n            });\n        })];\n\n        xdomain = xdomain;\n        ydomain = ydomain;\n\n        /* Рассчёт цветов */\n        colors.domain(dataSet.map(function (c) {\n            return c.id;\n        }));\n\n        /* Установка границ по данным */\n        x.domain(xdomain);\n        y.domain(ydomain);\n\n        /* Обновление осей */\n        updateAxis(x, y);\n\n        /* Применение новых данных */\n        var lines = g.selectAll(\".city\").data(dataSet).enter().append(\"g\").attr(\"class\", \"city\");\n\n        /* Удаление лишнего, если нужно */\n        lines.exit().remove();\n\n        lines.append(\"path\").attr(\"class\", \"line\").attr(\"clip-path\", \"url(#clip-main)\").style(\"stroke\", function (d) {\n            return colors(d.id);\n        }).attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    /* Перерисовка всего графика */\n    function _reRenderChart(dataSet) {\n        /* Рассчёт границ по данным */\n\n        if (!zoomed) {\n            xdomain = [d3.min(dataSet, function (c) {\n                return d3.min(c.values, function (d) {\n                    return d.x;\n                });\n            }), d3.max(dataSet, function (c) {\n                return d3.max(c.values, function (d) {\n                    return d.x;\n                });\n            })];\n\n            ydomain = [0, d3.max(dataSet, function (c) {\n                return d3.max(c.values, function (d) {\n                    return d.y;\n                });\n            })];\n        }\n\n        /* Рассчёт цветов */\n        colors.domain(dataSet.map(function (c) {\n            return c.id;\n        }));\n\n        /* Установка границ по данным */\n        x.domain(xdomain);\n        y.domain(ydomain);\n\n        /* Обновление осей */\n        updateAxis(x, y);\n\n        /* Применение новых данных */\n        var lines = g.selectAll(\".city\").data(dataSet).enter().append(\"g\").attr(\"class\", \"city\");\n\n        /* Удаление лишнего, если нужно */\n        lines.exit().remove();\n\n        /* Перерисовка всех линий на графике */\n        g.selectAll(\".line\").attr(\"clip-path\", \"url(#clip-main)\").style(\"stroke\", function (d) {\n            return colors(d.id);\n        }).attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    function _mapToArr(localMap) {\n        return Object.keys(localMap).map(function (key) {\n            return { id: key, values: localMap[key] };\n        });\n    }\n\n    function updateAxis(localX, localY) {\n        g.selectAll(\".x-axis\").call(d3.axisBottom(localX));\n        g.selectAll(\".y-axis\").call(d3.axisLeft(localY));\n    }\n\n    function setData(localDataMap) {\n        if (!localDataMap || Object.prototype.toString.call(localDataMap) !== '[object Object]') {\n            return null;\n        }\n\n        this.dataMap = localDataMap;\n\n        // TODO вынести наверх\n        renderChart(_mapToArr(this.dataMap));\n\n        return this.dataMap;\n    }\n\n    function pushNewData(newData, lineId) {\n        if (!newData || Object.prototype.toString.call(newData) !== '[object Object]') {\n            return null;\n        }\n\n        this.dataMap[lineId].push(newData);\n\n        // TODO вынести наверх\n        _reRenderChart(_mapToArr(this.dataMap));\n    }\n\n    function zoom(xdomainTmp, ydomainTmp) {\n        zoomed = true;\n        ydomain = ydomainTmp;\n        xdomain = xdomainTmp;\n        //recalculate domains\n        if (xdomain[0] > xdomain[1]) {\n            x.domain([xdomain[1], xdomain[0]]);\n        } else {\n            x.domain([xdomain[0], xdomain[1]]);\n        }\n\n        if (ydomain[0] > ydomain[1]) {\n            y.domain([ydomain[1], ydomain[0]]);\n        } else {\n            y.domain([ydomain[0], ydomain[1]]);\n        }\n\n        //update axis and redraw lines\n        var t = g.transition().duration(750);\n        t.on(\"start\", function () {\n            drawing = true;\n        });\n        t.on(\"end\", function () {\n            drawing = false;\n        });\n        t.select(\".x-axis\").call(d3.axisBottom(x));\n        t.select(\".y-axis\").call(d3.axisLeft(y));\n\n        t.selectAll(\".line\").attr(\"d\", function (d) {\n            return line(d.values);\n        });\n    }\n\n    var zoomOut = function zoomOut() {\n        var dataSet = _mapToArr(this.dataMap);\n        var t = g.transition().duration(750);\n\n        t.on(\"start\", function () {\n            drawing = true;\n        });\n        t.on(\"end\", function () {\n            drawing = false;\n        });\n        xdomain = [d3.min(dataSet, function (c) {\n            return d3.min(c.values, function (d) {\n                return d.x;\n            });\n        }), d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.x;\n            });\n        })];\n\n        ydomain = [0, d3.max(dataSet, function (c) {\n            return d3.max(c.values, function (d) {\n                return d.y;\n            });\n        })];\n        x.domain(xdomain);\n        y.domain(ydomain);\n        t.select(\".x-axis\").call(d3.axisBottom(x));\n        t.select(\".y-axis\").call(d3.axisLeft(y));\n\n        t.selectAll(\".line\").attr(\"d\", function (d) {\n            return line(d.values);\n        });\n        zoomed = false;\n    };\n\n    window.renderChart = renderChart;\n    window._reRenderChart = _reRenderChart;\n    this.setData = setData;\n    this.pushNewData = pushNewData;\n}\n\nexports.default = Chart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ })
/******/ ]);